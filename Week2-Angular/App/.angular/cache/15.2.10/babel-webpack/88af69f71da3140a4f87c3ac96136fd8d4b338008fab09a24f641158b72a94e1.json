{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.users = [{\n      username: \"admin\",\n      password: \"123456789\"\n    }, {\n      username: \"corina\",\n      password: \"1234\"\n    }, {\n      username: \"vali\",\n      password: \"1234\"\n    }];\n    this.isLoggedIn = false;\n    this.isAdmin = false;\n    this.currentUser = \"\";\n  }\n  login(credentials) {\n    const user = this.users.find(u => u.username === credentials.username && u.password === credentials.password);\n    if (user) {\n      this.isLoggedIn = true;\n      this.isAdmin = user.username === 'admin';\n      this.currentUser = user.username;\n    } else {\n      this.isLoggedIn = false;\n      this.isAdmin = false;\n    }\n  }\n  logout() {\n    this.isLoggedIn = false;\n    this.isAdmin = false;\n  }\n  getIsLoggedIn() {\n    return this.isLoggedIn;\n  }\n  getIsAdmin() {\n    return this.isAdmin;\n  }\n  getUsername() {\n    return;\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,WAAW;EAEtBC;IACF,UAAK,GAAQ,CACX;MACEC,QAAQ,EAAC,OAAO;MAChBC,QAAQ,EAAC;KACV,EACD;MACED,QAAQ,EAAC,QAAQ;MACjBC,QAAQ,EAAC;KACV,EACD;MACED,QAAQ,EAAC,MAAM;MACfC,QAAQ,EAAC;KACV,CACF;IAED,eAAU,GAAC,KAAK;IAEhB,YAAO,GAAC,KAAK;IAEb,gBAAW,GAAQ,EAAE;EApBH;EAsBhBC,KAAK,CAACC,WAAe;IACnB,MAAMC,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,KAAKG,WAAW,CAACH,QAAQ,IAAIO,CAAC,CAACN,QAAQ,KAAKE,WAAW,CAACF,QAAQ,CAAC;IAE7G,IAAIG,IAAI,EAAE;MACR,IAAI,CAACI,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,OAAO,GAAGL,IAAI,CAACJ,QAAQ,KAAK,OAAO;MACxC,IAAI,CAACU,WAAW,GAACN,IAAI,CAACJ,QAAQ;KAC/B,MAAM;MAEL,IAAI,CAACQ,UAAU,GAAC,KAAK;MACrB,IAAI,CAACC,OAAO,GAAC,KAAK;;EAEtB;EAIAE,MAAM;IACJ,IAAI,CAACH,UAAU,GAAG,KAAK;IACvB,IAAI,CAACC,OAAO,GAAG,KAAK;EACtB;EAEAG,aAAa;IACX,OAAO,IAAI,CAACJ,UAAU;EACxB;EAEAK,UAAU;IACR,OAAO,IAAI,CAACJ,OAAO;EACrB;EACAK,WAAW;IACT;EACF;EAAC;qBAtDUhB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiB,SAAXjB,WAAW;IAAAkB,YAFV;EAAM","names":["AuthService","constructor","username","password","login","credentials","user","users","find","u","isLoggedIn","isAdmin","currentUser","logout","getIsLoggedIn","getIsAdmin","getUsername","factory","providedIn"],"sourceRoot":"","sources":["C:\\Facultate\\Internship\\Week2-Angular\\Ex2-MovieApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { user } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor() { }\nusers:user[]=[\n  {\n    username:\"admin\",\n    password:\"123456789\"\n  },\n  {\n    username:\"corina\",\n    password:\"1234\",\n  },\n  {\n    username:\"vali\",\n    password:\"1234\"\n  }\n]\n\nisLoggedIn=false;\n\nisAdmin=false;\n\ncurrentUser:string=\"\"\n\n  login(credentials:any){\n    const user = this.users.find(u => u.username === credentials.username && u.password === credentials.password);\n\n    if (user) {\n      this.isLoggedIn = true;\n      this.isAdmin = user.username === 'admin';\n      this.currentUser=user.username;\n    } else {\n\n      this.isLoggedIn=false;\n      this.isAdmin=false;\n    }\n  }\n\n\n\n  logout(): void {\n    this.isLoggedIn = false;\n    this.isAdmin = false;\n  }\n\n  getIsLoggedIn(): boolean {\n    return this.isLoggedIn;\n  }\n\n  getIsAdmin(): boolean {\n    return this.isAdmin;\n  }\n  getUsername():string{\n    return\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}